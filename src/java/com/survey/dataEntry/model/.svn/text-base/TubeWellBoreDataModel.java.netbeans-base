/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.survey.dataEntry.model;

import com.survey.tableClasses.TubeWellBoreTypeBean;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;

/**
 *
 * @author Administrator
 */
public class TubeWellBoreDataModel {

    private Connection connection;
    private String driverClass;
    private String connectionString;
    private String db_username;
    private String db_password;
    private String message;
    private String msgBgColor;
    private final String COLOR_OK = "yellow";
    private final String COLOR_ERROR = "red";

    public void setConnection() {
        try {
            Class.forName(driverClass);
            // connection = DriverManager.getConnection(connectionString+"?useUnicode=true&characterEncoding=UTF-8&character_set_results=utf8", db_username, db_password);
            connection = (Connection) DriverManager.getConnection(connectionString, db_username, db_password);
        } catch (Exception e) {
            System.out.println("WattageTypeModel setConnection() Error: " + e);
        }
    }

    public byte[] generateMapReport(String jrxmlFilePath, List<TubeWellBoreTypeBean> listAll) {
        byte[] reportInbytes = null;
        Connection c;
        //     HashMap mymap = new HashMap();
        try {

            JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(listAll);
            JasperReport compiledReport = JasperCompileManager.compileReport(jrxmlFilePath);
            reportInbytes = JasperRunManager.runReportToPdf(compiledReport, null, beanColDataSource);
        } catch (Exception e) {
            System.out.println("Error: in FuseTypeModel generateMapReport() JRException: " + e);
        }
        return reportInbytes;
    }

    public int insertRecord(TubeWellBoreTypeBean tubeWellBoreTypeBean) {

        String query = "INSERT INTO tubewell_bore_data ( depth, bore_diameter, bore_casing_type, motore_capacity, "
                + "motor_type, suction_diameter, delivery_diameter, discharge_capacity, remark,"
                + " tube_well_detail_id, tube_well_rev_no,date_of_installation) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) ";
        int rowsAffected = 0;
        try {
            java.sql.PreparedStatement pstmt = connection.prepareStatement(query);
            pstmt.setString(1, tubeWellBoreTypeBean.getDepth());
            pstmt.setString(2, tubeWellBoreTypeBean.getBore_diameter());
            pstmt.setString(3, tubeWellBoreTypeBean.getBore_casing_type());
            pstmt.setString(4, tubeWellBoreTypeBean.getMotore_capacity());
            pstmt.setString(5, tubeWellBoreTypeBean.getMotor_type());
            pstmt.setString(6, tubeWellBoreTypeBean.getSuction_diameter());
            pstmt.setString(7, tubeWellBoreTypeBean.getDelivery_diameter());
            pstmt.setString(8, tubeWellBoreTypeBean.getDischarge_capacity());
            pstmt.setString(9, tubeWellBoreTypeBean.getRemark());
            pstmt.setInt(10, tubeWellBoreTypeBean.getTube_well_detail_id());
            pstmt.setInt(11, tubeWellBoreTypeBean.getTube_well_rev_no());
            pstmt.setString(12, tubeWellBoreTypeBean.getDate_of_installation());
            rowsAffected = pstmt.executeUpdate();
        } catch (Exception e) {
            System.out.println("Error while inserting record...." + e);
        }
        if (rowsAffected > 0) {
            message = "Record saved successfully.";
            msgBgColor = COLOR_OK;
        } else {
            message = "Cannot save the record, some error.";
            msgBgColor = COLOR_ERROR;
        }
        return rowsAffected;

    }

    public int updateRecord(TubeWellBoreTypeBean tubeWellBoreTypeBean) {
        String query = "UPDATE tubewell_bore_data SET depth=?, bore_diameter=?, bore_casing_type=?, motore_capacity=?, "
                + "motor_type=?, suction_diameter=?, delivery_diameter=?, discharge_capacity=?, remark=?,"
                + " tube_well_detail_id=?, tube_well_rev_no=?,date_of_installation=? WHERE tubewell_bore_data_id=? ";
        int rowsAffected = 0;
        try {
            java.sql.PreparedStatement pstmt = connection.prepareStatement(query);
            pstmt.setString(1, tubeWellBoreTypeBean.getDepth());
            pstmt.setString(2, tubeWellBoreTypeBean.getBore_diameter());
            pstmt.setString(3, tubeWellBoreTypeBean.getBore_casing_type());
            pstmt.setString(4, tubeWellBoreTypeBean.getMotore_capacity());
            pstmt.setString(5, tubeWellBoreTypeBean.getMotor_type());
            pstmt.setString(6, tubeWellBoreTypeBean.getSuction_diameter());
            pstmt.setString(7, tubeWellBoreTypeBean.getDelivery_diameter());
            pstmt.setString(8, tubeWellBoreTypeBean.getDischarge_capacity());
            pstmt.setString(9, tubeWellBoreTypeBean.getRemark());
            pstmt.setInt(10, tubeWellBoreTypeBean.getTube_well_detail_id());
            pstmt.setInt(11, tubeWellBoreTypeBean.getTube_well_rev_no());
             pstmt.setString(12, tubeWellBoreTypeBean.getDate_of_installation());
            pstmt.setInt(13, tubeWellBoreTypeBean.getTube_well_detail_id());
            rowsAffected = pstmt.executeUpdate();
        } catch (Exception e) {
            System.out.println("error while updating record........." + e);
        }
        if (rowsAffected > 0) {
            message = "Record updated successfully.";
            msgBgColor = COLOR_OK;
        } else {
            message = "Cannot update the record, some error.";
            msgBgColor = COLOR_ERROR;
        }
        return rowsAffected;
    }

    public int getTubeWellDetailId(String tubewell_name) {
        String query = " select tube_well_detail_id from tube_well_detail where tube_well_name='" + tubewell_name + "'";
        int noOfRows = 0;
        try {
            PreparedStatement stmt = connection.prepareStatement(query);

            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                noOfRows = rs.getInt("tube_well_detail_id");
            }
        } catch (Exception e) {
            System.out.println("Error inside getDivisonId division type model" + e);
        }

        return noOfRows;
    }

    public int getTubeWellRevNo(String tubewell_name) {
        String query = " select tube_well_rev_no from tube_well_detail where tube_well_name='" + tubewell_name + "'";
        int noOfRows = 0;
        try {
            PreparedStatement stmt = connection.prepareStatement(query);

            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                noOfRows = rs.getInt("tube_well_rev_no");
            }
        } catch (Exception e) {
            System.out.println("Error inside getDivisonId division type model" + e);
        }

        return noOfRows;
    }

    public List<String> getTUbeWellName(String q) {
        List<String> list = new ArrayList<String>();
        String query = " SELECT tube_well_name FROM tube_well_detail GROUP BY tube_well_name ORDER BY tube_well_name ";
        try {
            ResultSet rset = connection.prepareStatement(query).executeQuery();
            int count = 0;
            q = q.trim();
            while (rset.next()) {    // move cursor from BOR to valid record.
                String tube_well_name = rset.getString("tube_well_name");
                if (tube_well_name.toUpperCase().startsWith(q.toUpperCase())) {
                    list.add(tube_well_name);
                    count++;
                }
            }
            if (count == 0) {
                list.add("No such Fuse exists.");
            }
        } catch (Exception e) {
            System.out.println("getFuseType ERROR inside FuseTypeModel - " + e);
        }
        return list;
    }

    public int getNoOfRows(String searchTubeWellName) {
        String query = " SELECT Count(*) "
                + " FROM tubewell_bore_data as t ,tube_well_detail as td where t.tube_well_detail_id=td.tube_well_detail_id"
                + " AND IF('" + searchTubeWellName + "' = '', td.tube_well_name  LIKE '%%', td.tube_well_name =?) "
                + " ORDER BY  td.tube_well_name ";
        int noOfRows = 0;
        try {
            PreparedStatement stmt = connection.prepareStatement(query);
            stmt.setString(1, searchTubeWellName);
            ResultSet rs = stmt.executeQuery();
            rs.next();
            noOfRows = Integer.parseInt(rs.getString(1));
        } catch (Exception e) {
            System.out.println("Error inside getNoOfRows fuse type model" + e);
        }
        System.out.println("No of Rows in Table for search is" + noOfRows);
        return noOfRows;
    }

    public List<TubeWellBoreTypeBean> showData(int lowerLimit, int noOfRowsToDisplay, String searchTubeWellName) {
        List<TubeWellBoreTypeBean> list = new ArrayList<TubeWellBoreTypeBean>();

        String query = " SELECT tubewell_bore_data_id, depth, bore_diameter, bore_casing_type, motore_capacity, motor_type, suction_diameter,"
                + " delivery_diameter, discharge_capacity, t.remark, td.tube_well_name "
                + " FROM tubewell_bore_data as t ,tube_well_detail as td where t.tube_well_detail_id=td.tube_well_detail_id"
                + " AND IF('" + searchTubeWellName + "' = '', td.tube_well_name  LIKE '%%', td.tube_well_name =?) "
                + " ORDER BY  td.tube_well_name "
                + " LIMIT " + lowerLimit + ", " + noOfRowsToDisplay;
        try {
            System.out.println(query);
            PreparedStatement pstmt = connection.prepareStatement(query);
            pstmt.setString(1, searchTubeWellName);
            ResultSet rset = pstmt.executeQuery();
            while (rset.next()) {
                TubeWellBoreTypeBean tubeWellBoreType = new TubeWellBoreTypeBean();
                tubeWellBoreType.setTubewell_bore_data_id(rset.getInt("tubewell_bore_data_id"));
                tubeWellBoreType.setDepth(rset.getString("depth"));
                tubeWellBoreType.setBore_diameter(rset.getString("bore_diameter"));
                tubeWellBoreType.setBore_casing_type(rset.getString("bore_casing_type"));
                tubeWellBoreType.setMotore_capacity(rset.getString("motore_capacity"));
                tubeWellBoreType.setMotor_type(rset.getString("motor_type"));
                tubeWellBoreType.setSuction_diameter(rset.getString("suction_diameter"));
                tubeWellBoreType.setDelivery_diameter(rset.getString("delivery_diameter"));
                tubeWellBoreType.setDischarge_capacity(rset.getString("discharge_capacity"));
                tubeWellBoreType.setRemark(rset.getString("remark"));
                tubeWellBoreType.setTubewell_name(rset.getString("tube_well_name"));


                list.add(tubeWellBoreType);
            }
        } catch (Exception e) {
            System.out.println("Error: " + e);
        }
        return list;
    }

    public List<TubeWellBoreTypeBean> showAllData(String searchTubeWellName) {
        List<TubeWellBoreTypeBean> listAll = new ArrayList<TubeWellBoreTypeBean>();

        String query = " SELECT tubewell_bore_data_id, depth, bore_diameter, bore_casing_type, motore_capacity, motor_type, suction_diameter,"
                + " delivery_diameter, discharge_capacity, t.remark, td.tube_well_name "
                + " FROM tubewell_bore_data as t ,tube_well_detail as td where t.tube_well_detail_id=td.tube_well_detail_id"
                + " AND IF('" + searchTubeWellName + "' = '', td.tube_well_name  LIKE '%%', td.tube_well_name =?) "
                + " ORDER BY  td.tube_well_name ";
        try {
            System.out.println(query);
            PreparedStatement pstmt = connection.prepareStatement(query);
            pstmt.setString(1, searchTubeWellName);
            ResultSet rset = pstmt.executeQuery();
            while (rset.next()) {
                TubeWellBoreTypeBean tubeWellBoreType = new TubeWellBoreTypeBean();
                tubeWellBoreType.setTubewell_bore_data_id(rset.getInt("tubewell_bore_data_id"));
                tubeWellBoreType.setDepth(rset.getString("depth"));
                tubeWellBoreType.setBore_diameter(rset.getString("bore_diameter"));
                tubeWellBoreType.setBore_casing_type(rset.getString("bore_casing_type"));
                tubeWellBoreType.setMotore_capacity(rset.getString("motore_capacity"));
                tubeWellBoreType.setMotor_type(rset.getString("motor_type"));
                tubeWellBoreType.setSuction_diameter(rset.getString("suction_diameter"));
                tubeWellBoreType.setDelivery_diameter(rset.getString("delivery_diameter"));
                tubeWellBoreType.setDischarge_capacity(rset.getString("discharge_capacity"));
                tubeWellBoreType.setRemark(rset.getString("remark"));
                tubeWellBoreType.setTubewell_name(rset.getString("tube_well_name"));


                listAll.add(tubeWellBoreType);
            }
        } catch (Exception e) {
            System.out.println("Error: " + e);
        }
        return listAll;
    }

    public int deleteRecord(int tubewell_bore_data_id) {
        String query = "DELETE FROM tubewell_bore_data WHERE tubewell_bore_data_id=" + tubewell_bore_data_id;
        int rowsAffected = 0;
        try {
            rowsAffected = connection.prepareStatement(query).executeUpdate();
        } catch (Exception e) {
            System.out.println("Error: " + e);
        }
        if (rowsAffected > 0) {
            message = "Record deleted successfully......";
            msgBgColor = COLOR_OK;
        } else {
            message = "Error Record cannot be deleted.....";
            msgBgColor = COLOR_ERROR;
        }
        return rowsAffected;
    }

    public void closeConnection() {
        try {
            connection.close();
        } catch (Exception e) {
            System.out.println("Error inside closeConnection TrafficTypeModel:" + e);
        }
    }

    public String getMessage() {
        return message;
    }

    public String getMsgBgColor() {
        return msgBgColor;
    }

    public Connection getConnection() {
        return connection;
    }

    public void setConnection(Connection connection) {
        this.connection = connection;
    }

    public String getConnectionString() {
        return connectionString;
    }

    public void setConnectionString(String connectionString) {
        this.connectionString = connectionString;
    }

    public String getDb_password() {
        return db_password;
    }

    public void setDb_password(String db_password) {
        this.db_password = db_password;
    }

    public String getDb_username() {
        return db_username;
    }

    public void setDb_username(String db_username) {
        this.db_username = db_username;
    }

    public String getDriverClass() {
        return driverClass;
    }

    public void setDriverClass(String driverClass) {
        this.driverClass = driverClass;
    }
}
